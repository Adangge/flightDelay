{"fileName":"/contracts/FlightDelayController.sol","name":"FlightDelayController","abi":[{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"deregister","outputs":[{"name":"result","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"contractIds","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setOneContract","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"destruct_one","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"destruct_all","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"selfRegister","outputs":[{"name":"result","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"setAllContracts","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"getContract","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"contracts","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"source":"/**\n * FlightDelay with Oraclized Underwriting and Payout\n *\n * @description Controller contract\n * @copyright (c) 2017 etherisc GmbH\n * @author Christoph Mussenbrock\n *\n */\n\n/***********************************************************************************\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********              ATTENTION                                           **********\n********                                                                  **********\n********                                                                  **********\n********              THIS IS A GENERATED FILE.                           **********\n********                                                                  **********\n********              DON'T MODIFY!                                       **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n********                                                                  **********\n***********************************************************************************/\n\npragma solidity ^0.4.8;\n\nimport \"./Owned.sol\";\nimport \"./FlightDelayControlledContract.sol\";\n\ncontract FlightDelayController is \n    \n    Owned \n\n{\n\n    mapping (bytes32 => address) public contracts;\n    bytes32[] public contractIds;\n\n    /**\n     * Only Owner.\n     */\n    modifier onlyOwner { \n        if (msg.sender != owner) {\n            throw;\n        }\n        _;\n    }\n\n    /**\n     * Initiator of Transaction must be owner. Important for deploying contracts.\n     */\n    modifier onlyOwnerTx { \n        if (tx.origin != owner) {\n            throw;\n        }\n        _;\n    }\n\n    /**\n     * Constructor.\n     */\n    function FlightDelayController() payable {\n        owner = msg.sender;\n        selfRegister('FD.Owner');\n    }\n\n    /**\n     * Store address of one contract in mapping.\n     * @param _addr       Address of contract\n     * @param _id         ID of contract\n     */\n    function setContract(address _addr, bytes32 _id) internal {\n        contracts[_id] = _addr;\n    }\n\n    /**\n     * Get contract address from ID. This function is called by the\n     * contract's setContracts function.\n     * @param _id         ID of contract\n     * @return The address of the contract.\n     */\n    function getContract(bytes32 _id) returns (address) {\n        return contracts[_id];\n    }\n\n    /**\n     * Self-registration of contracts.\n     * During deployment, the constructor call this via the setController function.\n     * It will only accept calls of deployments initiated by the owner.\n     * @param _id         ID of contract\n     * @return  bool        success\n     */\n    function selfRegister(bytes32 _id) onlyOwnerTx returns (bool result) {\n        setContract(msg.sender, _id);\n        contractIds.push(_id);\n        return true;\n    }\n\n    /**\n     * Deregister a contract.\n     * In future, contracts should be exchangeable.\n     * @param _id         ID of contract\n     * @return  bool        success \n     */\n    function deregister(bytes32 _id) onlyOwner returns (bool result) {\n        if (getContract(_id) == 0x0){\n            return false;\n        }\n        setContract(0x0, _id);\n        return true;\n    }\n\n    /**\n     * After deploying all contracts, this function is called and calls\n     * setContracts() for every registered contract.\n     * This call pulls the addresses of the needed contracts in the respective contract.\n     * We assume that contractIds.length is small, so this won't run out of gas.\n     */\n    function setAllContracts() onlyOwner {\n        uint i;\n        FlightDelayControlledContract FD_CC; \n        // TODO: Check for upper bound for i\n        // i = 0 is FD.Owner, we skip this.\n        for (i = 1; i < contractIds.length; i++) {\n            FD_CC = FlightDelayControlledContract(contracts[contractIds[i]]);\n            FD_CC.setContracts();\n        }\n    }\n\n    function setOneContract(uint i) onlyOwner {\n        \n        FlightDelayControlledContract FD_CC; \n        // TODO: Check for upper bound for i\n        FD_CC = FlightDelayControlledContract(contracts[contractIds[i]]);\n        FD_CC.setContracts();\n    }\n\n    /**\n     * Destruct one contract.\n     * @param _id         ID of contract to destroy.\n     */\n    function destruct_one(bytes32 _id) onlyOwner {\n        address addr = getContract(_id);\n        if (addr != 0x0) {\n            FlightDelayControlledContract(addr).destruct();\n        }\n    }\n\n    /**\n     * Destruct all contracts.\n     * We assume that contractIds.length is small, so this won't run out of gas.\n     * Otherwise, you can still destroy one contract after the other with destruct_one.\n     */\n    function destruct_all() onlyOwner {\n\n        uint i;\n        // TODO: Check for upper bound for i\n        for (i = 1; i < contractIds.length; i++) {\n            destruct_one(contractIds[i]);\n        }\n\n        selfdestruct(owner);\n    }\n\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_newOwner","type":"address","description":"the new owner"}],"name":"setOwner","outputs":[],"payable":false,"type":"function","notice":"set a new owner. ","signature":"setOwner(address)","signatureHash":"13af4035"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32","description":"ID of contract"}],"name":"deregister","outputs":[{"name":"result","type":"bool"}],"payable":false,"type":"function","return":"bool        success ","notice":"Deregister a contract. In future, contracts should be exchangeable.","signature":"deregister(bytes32)","signatureHash":"20813154"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"contractIds","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function","signature":"contractIds(uint256)","signatureHash":"438c3aff"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setOneContract","outputs":[],"payable":false,"type":"function","signature":"setOneContract(uint256)","signatureHash":"6820f8d2"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32","description":"ID of contract to destroy."}],"name":"destruct_one","outputs":[],"payable":false,"type":"function","notice":"Destruct one contract.","signature":"destruct_one(bytes32)","signatureHash":"788975d1"},{"constant":false,"inputs":[],"name":"destruct_all","outputs":[],"payable":false,"type":"function","notice":"Destruct all contracts. We assume that contractIds.length is small, so this won't run out of gas. Otherwise, you can still destroy one contract after the other with destruct_one.","signature":"destruct_all()","signatureHash":"ac22bfd0"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32","description":"ID of contract"}],"name":"selfRegister","outputs":[{"name":"result","type":"bool"}],"payable":false,"type":"function","return":"bool        success","notice":"Self-registration of contracts. During deployment, the constructor call this via the setController function. It will only accept calls of deployments initiated by the owner.","signature":"selfRegister(bytes32)","signatureHash":"b222cb0b"},{"constant":false,"inputs":[],"name":"setAllContracts","outputs":[],"payable":false,"type":"function","notice":"After deploying all contracts, this function is called and calls setContracts() for every registered contract. This call pulls the addresses of the needed contracts in the respective contract. We assume that contractIds.length is small, so this won't run out of gas.","signature":"setAllContracts()","signatureHash":"d2571062"},{"constant":false,"inputs":[{"name":"_id","type":"bytes32","description":"ID of contract"}],"name":"getContract","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function","return":"The address of the contract.","notice":"Get contract address from ID. This function is called by the contract's setContracts function.","signature":"getContract(bytes32)","signatureHash":"e16c7d98"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"contracts","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function","signature":"contracts(bytes32)","signatureHash":"ec56a373"},{"inputs":[],"payable":true,"type":"constructor"}]}
